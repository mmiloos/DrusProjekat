//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitorClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMeasureService", CallbackContract=typeof(ServiceReference1.IMeasureServiceCallback))]
    public interface IMeasureService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasureService/Prijavi")]
        void Prijavi(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMeasureService/Odjavi")]
        void Odjavi(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureService/DodajMerenje", ReplyAction="http://tempuri.org/IMeasureService/DodajMerenjeResponse")]
        void DodajMerenje(int id, int value, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureService/SvaMerenjaSaMeraca", ReplyAction="http://tempuri.org/IMeasureService/SvaMerenjaSaMeracaResponse")]
        string SvaMerenjaSaMeraca(int measurerId, System.DateTime from, System.DateTime until, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureService/SviMomentiZaMerenjaLimit", ReplyAction="http://tempuri.org/IMeasureService/SviMomentiZaMerenjaLimitResponse")]
        string SviMomentiZaMerenjaLimit(int measurerId, int type, int limitType, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureService/SviTrenuciZaMerenjaSaLokacije", ReplyAction="http://tempuri.org/IMeasureService/SviTrenuciZaMerenjaSaLokacijeResponse")]
        string SviTrenuciZaMerenjaSaLokacije(string locationName, int type, int limitType, double limit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureService/ProsekLokacija", ReplyAction="http://tempuri.org/IMeasureService/ProsekLokacijaResponse")]
        string ProsekLokacija(string locationName, int type, System.DateTime dateFrom, System.DateTime dateUntil);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasureServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMeasureService/NotifyOfMeasurement", ReplyAction="http://tempuri.org/IMeasureService/NotifyOfMeasurementResponse")]
        void NotifyOfMeasurement(int id, double value, string type);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMeasureServiceChannel : ServiceReference1.IMeasureService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeasureServiceClient : System.ServiceModel.DuplexClientBase<ServiceReference1.IMeasureService>,ServiceReference1.IMeasureService {
        
        public MeasureServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MeasureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MeasureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MeasureServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MeasureServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Prijavi(int id) {
            base.Channel.Prijavi(id);
        }
        
        public void Odjavi(int id) {
            base.Channel.Odjavi(id);
        }
        
        public void DodajMerenje(int id, int value, string type) {
            base.Channel.DodajMerenje(id, value, type);
        }
        
        public string SvaMerenjaSaMeraca(int measurerId, System.DateTime from, System.DateTime until, int type) {
            return base.Channel.SvaMerenjaSaMeraca(measurerId, from, until, type);
        }
        
        public string SviMomentiZaMerenjaLimit(int measurerId, int type, int limitType, double limit) {
            return base.Channel.SviMomentiZaMerenjaLimit(measurerId, type, limitType, limit);
        }
        
        public string SviTrenuciZaMerenjaSaLokacije(string locationName, int type, int limitType, double limit) {
            return base.Channel.SviTrenuciZaMerenjaSaLokacije(locationName, type, limitType, limit);
        }
        
        public string ProsekLokacija(string locationName, int type, System.DateTime dateFrom, System.DateTime dateUntil) {
            return base.Channel.ProsekLokacija(locationName, type, dateFrom, dateUntil);
        }
    }
}
